First of all I use a simple Achitecture design. I organized my logic in the services project, all my models in Models folder, and so on. All the models and logic is focused on the https://www.episodate.com/api
I use Swagger, so all the endpoints are visible in swagger page when application is running.
This project was developed with Entity Framework with SQL Server runing in Docker. I'm using my context based on IdentityDbContext, with that i can easily handle user login with access token and refresh tocken.
I decided to use AutoMapper to Map my models into view models and the other way to. I made some custom maps to (CustomMapp_Genre_TVShowGenre, CustomMapp_TVShowGenre_Genre)
To my CRUD Logic, I decided to create a BaseService with the basic operations of CRUD. With that when I create a simple Service I only needed to extend the BaseService (EpisodeService is a good example).
To filter and Paginate my lists, I opted to have a BaseFilter to ensure all the filters/lists that I needed can be paginated. For each individual Model whe need to implement the filter  logic (like is showned on method "GetAllWithPagination" on TVShowService). After filtering the list then I call a custom method that I made to paginate my list with the request send in the Filter. ("GetAllWithPagination" on TVShowService is a very good example of that logic).
I've tryed to treat every exception that could occurred and send a custom response with the error from de API.
I Added MemoryCache to TVShowService, since it's the service with more logic, to GetAll the existing list of TVShows. (Dispite thet I had some issues that I'll explain later)
I tried to Unitesting my application, but I could't mock my context. I've spend a lot of time here to try to have my testes correctly configured, but I couldn't. Even that, I wrote some unit tests to prove that I'm capable of testing my code (I've always trying to follow DDT, but since I didn't have much time, I decided to code first then test it).
I started to implement the background worker, but I didn't finish it. My approache is comment in that worker, but basicly I was able to get the data from the website EpisoDate, but I had the same problem that i had in MemoryCache and another one related to the logic (I couldn't use a async loop to extract the details of the TVShows to Save)

Finaly, I'll talk about my problem. My MemoryChache is working, but since I decided to use a BaseService to implement CRUD logic, my services (like "TVShowService", "GenreService") they are not "injectables". For example, to call my service from the controller I need to inicialize my service. After a deep search of why my Memory cache didn't work I realized thet when we inicialize a class with "new", clears all the cache. The solution for that is to insure that my services can be used with dependency injection. And I think with that aproach I could finish my Background worker, have the unit tests environment stable and fix the cache problem.

If you need some explanations, please contact me.